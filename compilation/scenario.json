[
 {
  "shortname": "Test",
  "longname": "Test",
  "scenario": [
   {
    "action": "newContract",
    "accept_unknown_types": false,
    "export": "(template_id ((\"contracts/NFT.py\" 350) static_id 0) \nstorage ((\"contracts/NFT.py\" 46) record (administrator ((\"contracts/NFT.py\" 333) resolve ((\"contracts/NFT.py\" 333) attr ((\"contracts/NFT.py\" 333) account_of_seed \"Administrator\") \"address\"))) (creator ((\"contracts/NFT.py\" 333) resolve ((\"contracts/NFT.py\" 333) attr ((\"contracts/NFT.py\" 333) account_of_seed \"Administrator\") \"address\"))) (fa2 ((\"contracts/NFT.py\" 348) literal (address \"tz1KozzwY6LrGDsZkTPLGwbh13HNezL21JMV\"))) (ledger ((\"contracts/NFT.py\" 26) type_annotation ((\"contracts/NFT.py\" 26) big_map ) (bigmap \"nat\" \"address\"))) (metadata ((\"contracts/NFT.py\" 27) big_map (((\"contracts/NFT.py\" 350) literal (string \"\")) ((\"contracts/NFT.py\" 27) literal (bytes \"0x68747470733a2f2f6578616d706c652e636f6d\"))))) (next_token_id ((\"contracts/NFT.py\" 28) literal (nat 0))) (operators ((\"contracts/NFT.py\" 35) type_annotation ((\"contracts/NFT.py\" 35) big_map ) (bigmap (record ((operator \"address\") (owner \"address\") (token_id \"nat\")) (Some ((\"owner\") ((\"operator\") (\"token_id\")))) (\"contracts/NFT.py\" 34)) \"unit\"))) (paused ((\"contracts/NFT.py\" 46) literal (bool False))) (proposed_administrator ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit)))) (token_metadata ((\"contracts/NFT.py\" 41) type_annotation ((\"contracts/NFT.py\" 41) big_map ) (bigmap \"nat\" (record ((token_id \"nat\") (token_info (map \"string\" \"bytes\"))) None (\"contracts/NFT.py\" 41))))))\nstorage_type (())\nentry_points ((accept_administrator True None None None False None (\"contracts/NFT.py\" 221) (((\"contracts/NFT.py\" 228) verify ((\"contracts/NFT.py\" 227) is_variant ((\"contracts/NFT.py\" 227) attr ((\"contracts/NFT.py\" 350) data) \"proposed_administrator\") \"Some\") ((\"contracts/NFT.py\" 228) literal (string \"MINTER_NO_NEW_ADMIN\"))) ((\"contracts/NFT.py\" 232) verify ((\"contracts/NFT.py\" 231) eq ((\"\" -1) sender) ((\"contracts/NFT.py\" 231) open_variant ((\"contracts/NFT.py\" 227) attr ((\"contracts/NFT.py\" 350) data) \"proposed_administrator\") \"Some\" \"None\")) ((\"contracts/NFT.py\" 232) literal (string \"MINTER_NOT_PROPOSED_ADMIN\"))) ((\"contracts/NFT.py\" 235) set ((\"contracts/NFT.py\" 235) attr ((\"contracts/NFT.py\" 350) data) \"administrator\") ((\"\" -1) sender)) ((\"contracts/NFT.py\" 238) set ((\"contracts/NFT.py\" 227) attr ((\"contracts/NFT.py\" 350) data) \"proposed_administrator\") ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit)))))) (accept_fa2_administrator True None None None False None (\"contracts/NFT.py\" 263) (((\"contracts/NFT.py\" 153) verify ((\"contracts/NFT.py\" 152) eq ((\"\" -1) sender) ((\"contracts/NFT.py\" 235) attr ((\"contracts/NFT.py\" 350) data) \"administrator\")) ((\"contracts/NFT.py\" 153) literal (string \"MINTER_NOT_ADMIN\"))) ((\"contracts/NFT.py\" 280) set ((\"contracts/NFT.py\" 280) operations) ((\"contracts/NFT.py\" 280) cons ((\"contracts/NFT.py\" 280) transfer ((\"\" -1) literal (unit)) ((\"contracts/NFT.py\" 279) literal (mutez 0)) ((\"contracts/NFT.py\" 274) open_variant ((\"contracts/NFT.py\" 274) contract \"accept_administrator\" \"unit\" ((\"contracts/NFT.py\" 273) attr ((\"contracts/NFT.py\" 350) data) \"fa2\")) \"Some\" \"None\")) ((\"contracts/NFT.py\" 280) operations))))) (balance_of True None None None True None (\"contracts/NFT.py\" 120) (((\"contracts/NFT.py\" 145) set_type ((\"contracts/NFT.py\" 120) params) (record ((callback (contract (list (record ((balance \"nat\") (request (record ((owner \"address\") (token_id \"nat\")) None (\"contracts/NFT.py\" 11)))) (Some ((\"request\") (\"balance\"))) (\"contracts/NFT.py\" 12))))) (requests (list (record ((owner \"address\") (token_id \"nat\")) None (\"contracts/NFT.py\" 7))))) (Some ((\"requests\") (\"callback\"))) (\"contracts/NFT.py\" 15))) ((\"contracts/NFT.py\" 146) set ((\"contracts/NFT.py\" 146) operations) ((\"contracts/NFT.py\" 146) cons ((\"contracts/NFT.py\" 146) transfer ((\"contracts/NFT.py\" 146) map_function ((\"contracts/NFT.py\" 146) attr ((\"contracts/NFT.py\" 120) params) \"requests\") ((\"contracts/NFT.py\" 146) lambda 0 None False None \"\" (((\"contracts/NFT.py\" 135) verify ((\"contracts/NFT.py\" 135) lt ((\"contracts/NFT.py\" 135) attr ((\"contracts/NFT.py\" 146) lambda_params 0 \"\" (unknown 1)) \"token_id\") ((\"contracts/NFT.py\" 135) attr ((\"contracts/NFT.py\" 350) data) \"next_token_id\")) ((\"contracts/NFT.py\" 135) literal (string \"FA2_TOKEN_UNDEFINED\"))) ((\"contracts/NFT.py\" 140) result ((\"contracts/NFT.py\" 140) record (balance ((\"contracts/NFT.py\" 140) eif ((\"contracts/NFT.py\" 140) eq ((\"contracts/NFT.py\" 140) get_item ((\"contracts/NFT.py\" 140) attr ((\"contracts/NFT.py\" 350) data) \"ledger\") ((\"contracts/NFT.py\" 135) attr ((\"contracts/NFT.py\" 146) lambda_params 0 \"\" (unknown 1)) \"token_id\")) ((\"contracts/NFT.py\" 138) attr ((\"contracts/NFT.py\" 146) lambda_params 0 \"\" (unknown 1)) \"owner\")) ((\"contracts/NFT.py\" 140) literal (nat 1)) ((\"contracts/NFT.py\" 140) literal (intOrNat 0)))) (request ((\"contracts/NFT.py\" 138) record (owner ((\"contracts/NFT.py\" 138) attr ((\"contracts/NFT.py\" 146) lambda_params 0 \"\" (unknown 1)) \"owner\")) (token_id ((\"contracts/NFT.py\" 135) attr ((\"contracts/NFT.py\" 146) lambda_params 0 \"\" (unknown 1)) \"token_id\"))))))))) ((\"contracts/NFT.py\" 146) literal (mutez 0)) ((\"contracts/NFT.py\" 146) attr ((\"contracts/NFT.py\" 120) params) \"callback\")) ((\"contracts/NFT.py\" 146) operations))))) (mint True None None None True None (\"contracts/NFT.py\" 155) (((\"contracts/NFT.py\" 168) verify ((\"contracts/NFT.py\" 168) not ((\"contracts/NFT.py\" 168) attr ((\"contracts/NFT.py\" 350) data) \"paused\")) ((\"contracts/NFT.py\" 168) literal (string \"MINT_PAUSED\"))) ((\"contracts/NFT.py\" 170) verify ((\"contracts/NFT.py\" 170) eq ((\"\" -1) sender) ((\"contracts/NFT.py\" 235) attr ((\"contracts/NFT.py\" 350) data) \"administrator\")) ((\"contracts/NFT.py\" 170) literal (string \"FA2_NOT_ADMIN\"))) ((\"contracts/NFT.py\" 171) define_local \"compute_NFT_171\" ((\"contracts/NFT.py\" 135) attr ((\"contracts/NFT.py\" 350) data) \"next_token_id\") True) ((\"contracts/NFT.py\" 173) set ((\"contracts/NFT.py\" 173) get_item ((\"contracts/NFT.py\" 173) attr ((\"contracts/NFT.py\" 350) data) \"token_metadata\") ((\"contracts/NFT.py\" 171) get_local \"compute_NFT_171\")) ((\"contracts/NFT.py\" 173) record (token_id ((\"contracts/NFT.py\" 171) get_local \"compute_NFT_171\")) (token_info ((\"contracts/NFT.py\" 350) attr ((\"contracts/NFT.py\" 155) params) \"metadata\")))) ((\"contracts/NFT.py\" 175) set ((\"contracts/NFT.py\" 175) get_item ((\"contracts/NFT.py\" 140) attr ((\"contracts/NFT.py\" 350) data) \"ledger\") ((\"contracts/NFT.py\" 171) get_local \"compute_NFT_171\")) ((\"contracts/NFT.py\" 350) attr ((\"contracts/NFT.py\" 155) params) \"to_\")) ((\"contracts/NFT.py\" 176) set ((\"contracts/NFT.py\" 135) attr ((\"contracts/NFT.py\" 350) data) \"next_token_id\") ((\"contracts/NFT.py\" 176) add ((\"contracts/NFT.py\" 135) attr ((\"contracts/NFT.py\" 350) data) \"next_token_id\") ((\"contracts/NFT.py\" 176) literal (intOrNat 1)))))) (set_pause True None None None True None (\"contracts/NFT.py\" 282) (((\"contracts/NFT.py\" 287) set_type ((\"contracts/NFT.py\" 282) params) \"bool\") ((\"contracts/NFT.py\" 153) verify ((\"contracts/NFT.py\" 152) eq ((\"\" -1) sender) ((\"contracts/NFT.py\" 235) attr ((\"contracts/NFT.py\" 350) data) \"administrator\")) ((\"contracts/NFT.py\" 153) literal (string \"MINTER_NOT_ADMIN\"))) ((\"contracts/NFT.py\" 293) set ((\"contracts/NFT.py\" 168) attr ((\"contracts/NFT.py\" 350) data) \"paused\") ((\"contracts/NFT.py\" 282) params)))) (transfer True None None None True None (\"contracts/NFT.py\" 56) (((\"contracts/NFT.py\" 69) for_group \"transfer\" ((\"contracts/NFT.py\" 56) params) (((\"contracts/NFT.py\" 70) for_group \"tx\" ((\"contracts/NFT.py\" 70) attr ((\"contracts/NFT.py\" 69) iter \"transfer\") \"txs\") (((\"contracts/NFT.py\" 75) set_type ((\"contracts/NFT.py\" 70) iter \"tx\") (record ((amount \"nat\") (to_ \"address\") (token_id \"nat\")) (Some ((\"to_\") ((\"token_id\") (\"amount\")))) (\"contracts/NFT.py\" 75))) ((\"contracts/NFT.py\" 77) verify ((\"contracts/NFT.py\" 77) lt ((\"contracts/NFT.py\" 77) attr ((\"contracts/NFT.py\" 70) iter \"tx\") \"token_id\") ((\"contracts/NFT.py\" 135) attr ((\"contracts/NFT.py\" 350) data) \"next_token_id\")) ((\"contracts/NFT.py\" 77) literal (string \"FA2_TOKEN_UNDEFINED\"))) ((\"contracts/NFT.py\" 87) verify ((\"contracts/NFT.py\" 84) or ((\"contracts/NFT.py\" 79) eq ((\"contracts/NFT.py\" 79) attr ((\"contracts/NFT.py\" 69) iter \"transfer\") \"from_\") ((\"\" -1) sender)) ((\"contracts/NFT.py\" 84) contains ((\"contracts/NFT.py\" 80) attr ((\"contracts/NFT.py\" 350) data) \"operators\") ((\"contracts/NFT.py\" 84) record (operator ((\"\" -1) sender)) (owner ((\"contracts/NFT.py\" 79) attr ((\"contracts/NFT.py\" 69) iter \"transfer\") \"from_\")) (token_id ((\"contracts/NFT.py\" 77) attr ((\"contracts/NFT.py\" 70) iter \"tx\") \"token_id\"))))) ((\"contracts/NFT.py\" 87) literal (string \"FA2_NOT_OPERATOR\"))) ((\"contracts/NFT.py\" 89) if_block ((\"contracts/NFT.py\" 89) gt ((\"contracts/NFT.py\" 89) attr ((\"contracts/NFT.py\" 70) iter \"tx\") \"amount\") ((\"contracts/NFT.py\" 89) literal (intOrNat 0))) (((\"contracts/NFT.py\" 93) verify ((\"contracts/NFT.py\" 92) and ((\"contracts/NFT.py\" 91) eq ((\"contracts/NFT.py\" 89) attr ((\"contracts/NFT.py\" 70) iter \"tx\") \"amount\") ((\"contracts/NFT.py\" 91) literal (intOrNat 1))) ((\"contracts/NFT.py\" 92) eq ((\"contracts/NFT.py\" 92) get_item ((\"contracts/NFT.py\" 140) attr ((\"contracts/NFT.py\" 350) data) \"ledger\") ((\"contracts/NFT.py\" 77) attr ((\"contracts/NFT.py\" 70) iter \"tx\") \"token_id\")) ((\"contracts/NFT.py\" 79) attr ((\"contracts/NFT.py\" 69) iter \"transfer\") \"from_\"))) ((\"contracts/NFT.py\" 93) literal (string \"FA2_INSUFFICIENT_BALANCE\"))) ((\"contracts/NFT.py\" 95) set ((\"contracts/NFT.py\" 95) get_item ((\"contracts/NFT.py\" 140) attr ((\"contracts/NFT.py\" 350) data) \"ledger\") ((\"contracts/NFT.py\" 77) attr ((\"contracts/NFT.py\" 70) iter \"tx\") \"token_id\")) ((\"contracts/NFT.py\" 95) attr ((\"contracts/NFT.py\" 70) iter \"tx\") \"to_\")))))))))) (transfer_administrator True None None None True None (\"contracts/NFT.py\" 208) (((\"contracts/NFT.py\" 213) set_type ((\"contracts/NFT.py\" 208) params) \"address\") ((\"contracts/NFT.py\" 153) verify ((\"contracts/NFT.py\" 152) eq ((\"\" -1) sender) ((\"contracts/NFT.py\" 235) attr ((\"contracts/NFT.py\" 350) data) \"administrator\")) ((\"contracts/NFT.py\" 153) literal (string \"MINTER_NOT_ADMIN\"))) ((\"contracts/NFT.py\" 219) set ((\"contracts/NFT.py\" 227) attr ((\"contracts/NFT.py\" 350) data) \"proposed_administrator\") ((\"contracts/NFT.py\" 219) variant \"Some\" ((\"contracts/NFT.py\" 208) params))))) (transfer_fa2_administrator True None None None True None (\"contracts/NFT.py\" 240) (((\"contracts/NFT.py\" 246) set_type ((\"contracts/NFT.py\" 240) params) \"address\") ((\"contracts/NFT.py\" 153) verify ((\"contracts/NFT.py\" 152) eq ((\"\" -1) sender) ((\"contracts/NFT.py\" 235) attr ((\"contracts/NFT.py\" 350) data) \"administrator\")) ((\"contracts/NFT.py\" 153) literal (string \"MINTER_NOT_ADMIN\"))) ((\"contracts/NFT.py\" 261) set ((\"contracts/NFT.py\" 261) operations) ((\"contracts/NFT.py\" 261) cons ((\"contracts/NFT.py\" 261) transfer ((\"contracts/NFT.py\" 240) params) ((\"contracts/NFT.py\" 260) literal (mutez 0)) ((\"contracts/NFT.py\" 255) open_variant ((\"contracts/NFT.py\" 255) contract \"transfer_administrator\" \"address\" ((\"contracts/NFT.py\" 273) attr ((\"contracts/NFT.py\" 350) data) \"fa2\")) \"Some\" \"None\")) ((\"contracts/NFT.py\" 261) operations))))) (update_operators True None None None True None (\"contracts/NFT.py\" 97) (((\"contracts/NFT.py\" 111) for_group \"update\" ((\"contracts/NFT.py\" 97) params) (((\"contracts/NFT.py\" 112) match_cases ((\"contracts/NFT.py\" 111) iter \"update\") \"match_NFT_112\" (((\"contracts/NFT.py\" 113) match ((\"contracts/NFT.py\" 112) cases_arg \"match_NFT_112\") \"add_operator\" \"add_operator\" (((\"contracts/NFT.py\" 114) verify ((\"contracts/NFT.py\" 114) eq ((\"contracts/NFT.py\" 114) attr ((\"contracts/NFT.py\" 113) variant_arg \"add_operator\") \"owner\") ((\"\" -1) sender)) ((\"contracts/NFT.py\" 114) literal (string \"FA2_NOT_OWNER\"))) ((\"contracts/NFT.py\" 115) set ((\"contracts/NFT.py\" 115) get_item ((\"contracts/NFT.py\" 80) attr ((\"contracts/NFT.py\" 350) data) \"operators\") ((\"contracts/NFT.py\" 113) variant_arg \"add_operator\")) ((\"\" -1) literal (unit))))) ((\"contracts/NFT.py\" 116) match ((\"contracts/NFT.py\" 112) cases_arg \"match_NFT_112\") \"remove_operator\" \"remove_operator\" (((\"contracts/NFT.py\" 117) verify ((\"contracts/NFT.py\" 117) eq ((\"contracts/NFT.py\" 117) attr ((\"contracts/NFT.py\" 116) variant_arg \"remove_operator\") \"owner\") ((\"\" -1) sender)) ((\"contracts/NFT.py\" 117) literal (string \"FA2_NOT_OWNER\"))) ((\"contracts/NFT.py\" 118) del_item ((\"contracts/NFT.py\" 80) attr ((\"contracts/NFT.py\" 350) data) \"operators\") ((\"contracts/NFT.py\" 116) variant_arg \"remove_operator\")))))))))))\nflags ()\nprivates ()\nviews ((offchain all_tokens False (\"contracts/NFT.py\" 178) True \"Return the list of all the `token_id` known to the contracts.\" (((\"contracts/NFT.py\" 181) result ((\"contracts/NFT.py\" 181) range ((\"contracts/NFT.py\" 181) literal (intOrNat 0)) ((\"contracts/NFT.py\" 181) attr ((\"contracts/NFT.py\" 350) data) \"next_token_id\") ((\"contracts/NFT.py\" 181) literal (intOrNat 1)))))) (offchain get_balance True (\"contracts/NFT.py\" 183) True \"Return the balance of an address for the specified `token_id`.\" (((\"contracts/NFT.py\" 189) set_type ((\"contracts/NFT.py\" 183) params) (record ((owner \"address\") (token_id \"nat\")) (Some ((\"owner\") (\"token_id\"))) (\"contracts/NFT.py\" 189))) ((\"contracts/NFT.py\" 192) verify ((\"contracts/NFT.py\" 192) lt ((\"contracts/NFT.py\" 192) attr ((\"contracts/NFT.py\" 183) params) \"token_id\") ((\"contracts/NFT.py\" 192) attr ((\"contracts/NFT.py\" 350) data) \"next_token_id\")) ((\"contracts/NFT.py\" 192) literal (string \"FA2_TOKEN_UNDEFINED\"))) ((\"contracts/NFT.py\" 193) result ((\"contracts/NFT.py\" 193) eif ((\"contracts/NFT.py\" 193) eq ((\"contracts/NFT.py\" 193) get_item ((\"contracts/NFT.py\" 193) attr ((\"contracts/NFT.py\" 350) data) \"ledger\") ((\"contracts/NFT.py\" 192) attr ((\"contracts/NFT.py\" 183) params) \"token_id\")) ((\"contracts/NFT.py\" 193) attr ((\"contracts/NFT.py\" 183) params) \"owner\")) ((\"contracts/NFT.py\" 193) literal (intOrNat 1)) ((\"contracts/NFT.py\" 193) literal (intOrNat 0)))))) (offchain is_operator True (\"contracts/NFT.py\" 202) True \"Return whether `operator` is allowed to transfer `token_id` tokens\\n        owned by `owner`.\" (((\"contracts/NFT.py\" 206) result ((\"contracts/NFT.py\" 206) contains ((\"contracts/NFT.py\" 206) attr ((\"contracts/NFT.py\" 350) data) \"operators\") ((\"contracts/NFT.py\" 202) params))))) (onchain is_paused False (\"contracts/NFT.py\" 295) True \"Checks if the contracts is paused.\\n        \" (((\"contracts/NFT.py\" 300) result ((\"contracts/NFT.py\" 300) attr ((\"contracts/NFT.py\" 350) data) \"paused\")))) (offchain total_supply True (\"contracts/NFT.py\" 195) True \"Return the total number of tokens for the given `token_id` if known\\n        or fail if not.\" (((\"contracts/NFT.py\" 199) verify ((\"contracts/NFT.py\" 199) lt ((\"contracts/NFT.py\" 199) attr ((\"contracts/NFT.py\" 195) params) \"token_id\") ((\"contracts/NFT.py\" 199) attr ((\"contracts/NFT.py\" 350) data) \"next_token_id\")) ((\"contracts/NFT.py\" 199) literal (string \"FA2_TOKEN_UNDEFINED\"))) ((\"contracts/NFT.py\" 200) result ((\"contracts/NFT.py\" 200) literal (intOrNat 1))))))\nentry_points_layout ()\ninitial_metadata ((metadata_base (meta_map (\"contracts/NFT.py\" 54) (elem ((\"contracts/NFT.py\" 54) literal (string \"name\")) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"FatCow IO\")))) (elem ((\"contracts/NFT.py\" 54) literal (string \"version\")) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"0.1.0\")))) (elem ((\"contracts/NFT.py\" 54) literal (string \"description\")) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"This is the FatCow NFT base template for implementing tickets, implemented using the FA2 (TZIP-012) base.\")))) (elem ((\"contracts/NFT.py\" 54) literal (string \"interfaces\")) (meta_list (\"contracts/NFT.py\" 54) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"TZIP-012\"))) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"TZIP-016\"))))) (elem ((\"contracts/NFT.py\" 54) literal (string \"authors\")) (meta_list (\"contracts/NFT.py\" 54) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"SmartPy <https://fatcow.io/#contact>\"))))) (elem ((\"contracts/NFT.py\" 54) literal (string \"homepage\")) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"https://fatcow.io\")))) (elem ((\"contracts/NFT.py\" 54) literal (string \"source\")) (meta_map (\"contracts/NFT.py\" 54) (elem ((\"contracts/NFT.py\" 54) literal (string \"tools\")) (meta_list (\"contracts/NFT.py\" 54) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"SmartPy\"))))) (elem ((\"contracts/NFT.py\" 54) literal (string \"location\")) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"https://gitlab.com/SmartPy/smartpy/-/raw/master/python/templates/fa2_nft_minimal.py\")))))) (elem ((\"contracts/NFT.py\" 54) literal (string \"permissions\")) (meta_map (\"contracts/NFT.py\" 54) (elem ((\"contracts/NFT.py\" 54) literal (string \"operator\")) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"owner-or-operator-transfer\")))) (elem ((\"contracts/NFT.py\" 54) literal (string \"receiver\")) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"owner-no-hook\")))) (elem ((\"contracts/NFT.py\" 54) literal (string \"sender\")) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"owner-no-hook\")))))) (elem ((\"contracts/NFT.py\" 54) literal (string \"views\")) (meta_list (\"contracts/NFT.py\" 54) (meta_view \"all_tokens\" (\"contracts/NFT.py\" 178)) (meta_view \"get_balance\" (\"contracts/NFT.py\" 183)) (meta_view \"is_operator\" (\"contracts/NFT.py\" 202)) (meta_view \"total_supply\" (\"contracts/NFT.py\" 195)))))))\nbalance ())",
    "id": "((\"contracts/NFT.py\" 350) static_id 0)",
    "line_no": "(\"contracts/NFT.py\" 350)",
    "show": true
   }
  ],
  "kind": "test"
 },
 {
  "shortname": "FatCowIONFT",
  "longname": "FatCowIONFT",
  "scenario": [
   {
    "action": "newContract",
    "accept_unknown_types": false,
    "export": "(template_id ((\"\" -1) static_id 0) \nstorage ((\"contracts/NFT.py\" 46) record (administrator ((\"contracts/NFT.py\" 333) resolve ((\"contracts/NFT.py\" 333) attr ((\"contracts/NFT.py\" 333) account_of_seed \"Administrator\") \"address\"))) (creator ((\"contracts/NFT.py\" 333) resolve ((\"contracts/NFT.py\" 333) attr ((\"contracts/NFT.py\" 333) account_of_seed \"Administrator\") \"address\"))) (fa2 ((\"contracts/NFT.py\" 359) literal (address \"tz1KozzwY6LrGDsZkTPLGwbh13HNezL21JMV\"))) (ledger ((\"contracts/NFT.py\" 26) type_annotation ((\"contracts/NFT.py\" 26) big_map ) (bigmap \"nat\" \"address\"))) (metadata ((\"contracts/NFT.py\" 27) big_map (((\"\" -1) literal (string \"\")) ((\"contracts/NFT.py\" 27) literal (bytes \"0x68747470733a2f2f6578616d706c652e636f6d\"))))) (next_token_id ((\"contracts/NFT.py\" 28) literal (nat 0))) (operators ((\"contracts/NFT.py\" 35) type_annotation ((\"contracts/NFT.py\" 35) big_map ) (bigmap (record ((operator \"address\") (owner \"address\") (token_id \"nat\")) (Some ((\"owner\") ((\"operator\") (\"token_id\")))) (\"contracts/NFT.py\" 34)) \"unit\"))) (paused ((\"contracts/NFT.py\" 46) literal (bool False))) (proposed_administrator ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit)))) (token_metadata ((\"contracts/NFT.py\" 41) type_annotation ((\"contracts/NFT.py\" 41) big_map ) (bigmap \"nat\" (record ((token_id \"nat\") (token_info (map \"string\" \"bytes\"))) None (\"contracts/NFT.py\" 41))))))\nstorage_type (())\nentry_points ((accept_administrator True None None None False None (\"contracts/NFT.py\" 221) (((\"contracts/NFT.py\" 228) verify ((\"contracts/NFT.py\" 227) is_variant ((\"contracts/NFT.py\" 227) attr ((\"\" -1) data) \"proposed_administrator\") \"Some\") ((\"contracts/NFT.py\" 228) literal (string \"MINTER_NO_NEW_ADMIN\"))) ((\"contracts/NFT.py\" 232) verify ((\"contracts/NFT.py\" 231) eq ((\"\" -1) sender) ((\"contracts/NFT.py\" 231) open_variant ((\"contracts/NFT.py\" 227) attr ((\"\" -1) data) \"proposed_administrator\") \"Some\" \"None\")) ((\"contracts/NFT.py\" 232) literal (string \"MINTER_NOT_PROPOSED_ADMIN\"))) ((\"contracts/NFT.py\" 235) set ((\"contracts/NFT.py\" 235) attr ((\"\" -1) data) \"administrator\") ((\"\" -1) sender)) ((\"contracts/NFT.py\" 238) set ((\"contracts/NFT.py\" 227) attr ((\"\" -1) data) \"proposed_administrator\") ((\"\" -1) variant \"None\" ((\"\" -1) literal (unit)))))) (accept_fa2_administrator True None None None False None (\"contracts/NFT.py\" 263) (((\"contracts/NFT.py\" 153) verify ((\"contracts/NFT.py\" 152) eq ((\"\" -1) sender) ((\"contracts/NFT.py\" 235) attr ((\"\" -1) data) \"administrator\")) ((\"contracts/NFT.py\" 153) literal (string \"MINTER_NOT_ADMIN\"))) ((\"contracts/NFT.py\" 280) set ((\"contracts/NFT.py\" 280) operations) ((\"contracts/NFT.py\" 280) cons ((\"contracts/NFT.py\" 280) transfer ((\"\" -1) literal (unit)) ((\"contracts/NFT.py\" 279) literal (mutez 0)) ((\"contracts/NFT.py\" 274) open_variant ((\"contracts/NFT.py\" 274) contract \"accept_administrator\" \"unit\" ((\"contracts/NFT.py\" 273) attr ((\"\" -1) data) \"fa2\")) \"Some\" \"None\")) ((\"contracts/NFT.py\" 280) operations))))) (balance_of True None None None True None (\"contracts/NFT.py\" 120) (((\"contracts/NFT.py\" 145) set_type ((\"contracts/NFT.py\" 120) params) (record ((callback (contract (list (record ((balance \"nat\") (request (record ((owner \"address\") (token_id \"nat\")) None (\"contracts/NFT.py\" 11)))) (Some ((\"request\") (\"balance\"))) (\"contracts/NFT.py\" 12))))) (requests (list (record ((owner \"address\") (token_id \"nat\")) None (\"contracts/NFT.py\" 7))))) (Some ((\"requests\") (\"callback\"))) (\"contracts/NFT.py\" 15))) ((\"contracts/NFT.py\" 146) set ((\"contracts/NFT.py\" 146) operations) ((\"contracts/NFT.py\" 146) cons ((\"contracts/NFT.py\" 146) transfer ((\"contracts/NFT.py\" 146) map_function ((\"contracts/NFT.py\" 146) attr ((\"contracts/NFT.py\" 120) params) \"requests\") ((\"contracts/NFT.py\" 146) lambda 0 None False None \"\" (((\"contracts/NFT.py\" 135) verify ((\"contracts/NFT.py\" 135) lt ((\"contracts/NFT.py\" 135) attr ((\"contracts/NFT.py\" 146) lambda_params 0 \"\" (unknown 3)) \"token_id\") ((\"contracts/NFT.py\" 135) attr ((\"\" -1) data) \"next_token_id\")) ((\"contracts/NFT.py\" 135) literal (string \"FA2_TOKEN_UNDEFINED\"))) ((\"contracts/NFT.py\" 140) result ((\"contracts/NFT.py\" 140) record (balance ((\"contracts/NFT.py\" 140) eif ((\"contracts/NFT.py\" 140) eq ((\"contracts/NFT.py\" 140) get_item ((\"contracts/NFT.py\" 140) attr ((\"\" -1) data) \"ledger\") ((\"contracts/NFT.py\" 135) attr ((\"contracts/NFT.py\" 146) lambda_params 0 \"\" (unknown 3)) \"token_id\")) ((\"contracts/NFT.py\" 138) attr ((\"contracts/NFT.py\" 146) lambda_params 0 \"\" (unknown 3)) \"owner\")) ((\"contracts/NFT.py\" 140) literal (nat 1)) ((\"contracts/NFT.py\" 140) literal (intOrNat 0)))) (request ((\"contracts/NFT.py\" 138) record (owner ((\"contracts/NFT.py\" 138) attr ((\"contracts/NFT.py\" 146) lambda_params 0 \"\" (unknown 3)) \"owner\")) (token_id ((\"contracts/NFT.py\" 135) attr ((\"contracts/NFT.py\" 146) lambda_params 0 \"\" (unknown 3)) \"token_id\"))))))))) ((\"contracts/NFT.py\" 146) literal (mutez 0)) ((\"contracts/NFT.py\" 146) attr ((\"contracts/NFT.py\" 120) params) \"callback\")) ((\"contracts/NFT.py\" 146) operations))))) (mint True None None None True None (\"contracts/NFT.py\" 155) (((\"contracts/NFT.py\" 168) verify ((\"contracts/NFT.py\" 168) not ((\"contracts/NFT.py\" 168) attr ((\"\" -1) data) \"paused\")) ((\"contracts/NFT.py\" 168) literal (string \"MINT_PAUSED\"))) ((\"contracts/NFT.py\" 170) verify ((\"contracts/NFT.py\" 170) eq ((\"\" -1) sender) ((\"contracts/NFT.py\" 235) attr ((\"\" -1) data) \"administrator\")) ((\"contracts/NFT.py\" 170) literal (string \"FA2_NOT_ADMIN\"))) ((\"contracts/NFT.py\" 171) define_local \"compute_NFT_171i\" ((\"contracts/NFT.py\" 135) attr ((\"\" -1) data) \"next_token_id\") True) ((\"contracts/NFT.py\" 173) set ((\"contracts/NFT.py\" 173) get_item ((\"contracts/NFT.py\" 173) attr ((\"\" -1) data) \"token_metadata\") ((\"contracts/NFT.py\" 171) get_local \"compute_NFT_171i\")) ((\"contracts/NFT.py\" 173) record (token_id ((\"contracts/NFT.py\" 171) get_local \"compute_NFT_171i\")) (token_info ((\"\" -1) attr ((\"contracts/NFT.py\" 155) params) \"metadata\")))) ((\"contracts/NFT.py\" 175) set ((\"contracts/NFT.py\" 175) get_item ((\"contracts/NFT.py\" 140) attr ((\"\" -1) data) \"ledger\") ((\"contracts/NFT.py\" 171) get_local \"compute_NFT_171i\")) ((\"\" -1) attr ((\"contracts/NFT.py\" 155) params) \"to_\")) ((\"contracts/NFT.py\" 176) set ((\"contracts/NFT.py\" 135) attr ((\"\" -1) data) \"next_token_id\") ((\"contracts/NFT.py\" 176) add ((\"contracts/NFT.py\" 135) attr ((\"\" -1) data) \"next_token_id\") ((\"contracts/NFT.py\" 176) literal (intOrNat 1)))))) (set_pause True None None None True None (\"contracts/NFT.py\" 282) (((\"contracts/NFT.py\" 287) set_type ((\"contracts/NFT.py\" 282) params) \"bool\") ((\"contracts/NFT.py\" 153) verify ((\"contracts/NFT.py\" 152) eq ((\"\" -1) sender) ((\"contracts/NFT.py\" 235) attr ((\"\" -1) data) \"administrator\")) ((\"contracts/NFT.py\" 153) literal (string \"MINTER_NOT_ADMIN\"))) ((\"contracts/NFT.py\" 293) set ((\"contracts/NFT.py\" 168) attr ((\"\" -1) data) \"paused\") ((\"contracts/NFT.py\" 282) params)))) (transfer True None None None True None (\"contracts/NFT.py\" 56) (((\"contracts/NFT.py\" 69) for_group \"transfer\" ((\"contracts/NFT.py\" 56) params) (((\"contracts/NFT.py\" 70) for_group \"tx\" ((\"contracts/NFT.py\" 70) attr ((\"contracts/NFT.py\" 69) iter \"transfer\") \"txs\") (((\"contracts/NFT.py\" 75) set_type ((\"contracts/NFT.py\" 70) iter \"tx\") (record ((amount \"nat\") (to_ \"address\") (token_id \"nat\")) (Some ((\"to_\") ((\"token_id\") (\"amount\")))) (\"contracts/NFT.py\" 75))) ((\"contracts/NFT.py\" 77) verify ((\"contracts/NFT.py\" 77) lt ((\"contracts/NFT.py\" 77) attr ((\"contracts/NFT.py\" 70) iter \"tx\") \"token_id\") ((\"contracts/NFT.py\" 135) attr ((\"\" -1) data) \"next_token_id\")) ((\"contracts/NFT.py\" 77) literal (string \"FA2_TOKEN_UNDEFINED\"))) ((\"contracts/NFT.py\" 87) verify ((\"contracts/NFT.py\" 84) or ((\"contracts/NFT.py\" 79) eq ((\"contracts/NFT.py\" 79) attr ((\"contracts/NFT.py\" 69) iter \"transfer\") \"from_\") ((\"\" -1) sender)) ((\"contracts/NFT.py\" 84) contains ((\"contracts/NFT.py\" 80) attr ((\"\" -1) data) \"operators\") ((\"contracts/NFT.py\" 84) record (operator ((\"\" -1) sender)) (owner ((\"contracts/NFT.py\" 79) attr ((\"contracts/NFT.py\" 69) iter \"transfer\") \"from_\")) (token_id ((\"contracts/NFT.py\" 77) attr ((\"contracts/NFT.py\" 70) iter \"tx\") \"token_id\"))))) ((\"contracts/NFT.py\" 87) literal (string \"FA2_NOT_OPERATOR\"))) ((\"contracts/NFT.py\" 89) if_block ((\"contracts/NFT.py\" 89) gt ((\"contracts/NFT.py\" 89) attr ((\"contracts/NFT.py\" 70) iter \"tx\") \"amount\") ((\"contracts/NFT.py\" 89) literal (intOrNat 0))) (((\"contracts/NFT.py\" 93) verify ((\"contracts/NFT.py\" 92) and ((\"contracts/NFT.py\" 91) eq ((\"contracts/NFT.py\" 89) attr ((\"contracts/NFT.py\" 70) iter \"tx\") \"amount\") ((\"contracts/NFT.py\" 91) literal (intOrNat 1))) ((\"contracts/NFT.py\" 92) eq ((\"contracts/NFT.py\" 92) get_item ((\"contracts/NFT.py\" 140) attr ((\"\" -1) data) \"ledger\") ((\"contracts/NFT.py\" 77) attr ((\"contracts/NFT.py\" 70) iter \"tx\") \"token_id\")) ((\"contracts/NFT.py\" 79) attr ((\"contracts/NFT.py\" 69) iter \"transfer\") \"from_\"))) ((\"contracts/NFT.py\" 93) literal (string \"FA2_INSUFFICIENT_BALANCE\"))) ((\"contracts/NFT.py\" 95) set ((\"contracts/NFT.py\" 95) get_item ((\"contracts/NFT.py\" 140) attr ((\"\" -1) data) \"ledger\") ((\"contracts/NFT.py\" 77) attr ((\"contracts/NFT.py\" 70) iter \"tx\") \"token_id\")) ((\"contracts/NFT.py\" 95) attr ((\"contracts/NFT.py\" 70) iter \"tx\") \"to_\")))))))))) (transfer_administrator True None None None True None (\"contracts/NFT.py\" 208) (((\"contracts/NFT.py\" 213) set_type ((\"contracts/NFT.py\" 208) params) \"address\") ((\"contracts/NFT.py\" 153) verify ((\"contracts/NFT.py\" 152) eq ((\"\" -1) sender) ((\"contracts/NFT.py\" 235) attr ((\"\" -1) data) \"administrator\")) ((\"contracts/NFT.py\" 153) literal (string \"MINTER_NOT_ADMIN\"))) ((\"contracts/NFT.py\" 219) set ((\"contracts/NFT.py\" 227) attr ((\"\" -1) data) \"proposed_administrator\") ((\"contracts/NFT.py\" 219) variant \"Some\" ((\"contracts/NFT.py\" 208) params))))) (transfer_fa2_administrator True None None None True None (\"contracts/NFT.py\" 240) (((\"contracts/NFT.py\" 246) set_type ((\"contracts/NFT.py\" 240) params) \"address\") ((\"contracts/NFT.py\" 153) verify ((\"contracts/NFT.py\" 152) eq ((\"\" -1) sender) ((\"contracts/NFT.py\" 235) attr ((\"\" -1) data) \"administrator\")) ((\"contracts/NFT.py\" 153) literal (string \"MINTER_NOT_ADMIN\"))) ((\"contracts/NFT.py\" 261) set ((\"contracts/NFT.py\" 261) operations) ((\"contracts/NFT.py\" 261) cons ((\"contracts/NFT.py\" 261) transfer ((\"contracts/NFT.py\" 240) params) ((\"contracts/NFT.py\" 260) literal (mutez 0)) ((\"contracts/NFT.py\" 255) open_variant ((\"contracts/NFT.py\" 255) contract \"transfer_administrator\" \"address\" ((\"contracts/NFT.py\" 273) attr ((\"\" -1) data) \"fa2\")) \"Some\" \"None\")) ((\"contracts/NFT.py\" 261) operations))))) (update_operators True None None None True None (\"contracts/NFT.py\" 97) (((\"contracts/NFT.py\" 111) for_group \"update\" ((\"contracts/NFT.py\" 97) params) (((\"contracts/NFT.py\" 112) match_cases ((\"contracts/NFT.py\" 111) iter \"update\") \"match_NFT_112\" (((\"contracts/NFT.py\" 113) match ((\"contracts/NFT.py\" 112) cases_arg \"match_NFT_112\") \"add_operator\" \"add_operator\" (((\"contracts/NFT.py\" 114) verify ((\"contracts/NFT.py\" 114) eq ((\"contracts/NFT.py\" 114) attr ((\"contracts/NFT.py\" 113) variant_arg \"add_operator\") \"owner\") ((\"\" -1) sender)) ((\"contracts/NFT.py\" 114) literal (string \"FA2_NOT_OWNER\"))) ((\"contracts/NFT.py\" 115) set ((\"contracts/NFT.py\" 115) get_item ((\"contracts/NFT.py\" 80) attr ((\"\" -1) data) \"operators\") ((\"contracts/NFT.py\" 113) variant_arg \"add_operator\")) ((\"\" -1) literal (unit))))) ((\"contracts/NFT.py\" 116) match ((\"contracts/NFT.py\" 112) cases_arg \"match_NFT_112\") \"remove_operator\" \"remove_operator\" (((\"contracts/NFT.py\" 117) verify ((\"contracts/NFT.py\" 117) eq ((\"contracts/NFT.py\" 117) attr ((\"contracts/NFT.py\" 116) variant_arg \"remove_operator\") \"owner\") ((\"\" -1) sender)) ((\"contracts/NFT.py\" 117) literal (string \"FA2_NOT_OWNER\"))) ((\"contracts/NFT.py\" 118) del_item ((\"contracts/NFT.py\" 80) attr ((\"\" -1) data) \"operators\") ((\"contracts/NFT.py\" 116) variant_arg \"remove_operator\")))))))))))\nflags ()\nprivates ()\nviews ((offchain all_tokens False (\"contracts/NFT.py\" 178) True \"Return the list of all the `token_id` known to the contracts.\" (((\"contracts/NFT.py\" 181) result ((\"contracts/NFT.py\" 181) range ((\"contracts/NFT.py\" 181) literal (intOrNat 0)) ((\"contracts/NFT.py\" 181) attr ((\"\" -1) data) \"next_token_id\") ((\"contracts/NFT.py\" 181) literal (intOrNat 1)))))) (offchain get_balance True (\"contracts/NFT.py\" 183) True \"Return the balance of an address for the specified `token_id`.\" (((\"contracts/NFT.py\" 189) set_type ((\"contracts/NFT.py\" 183) params) (record ((owner \"address\") (token_id \"nat\")) (Some ((\"owner\") (\"token_id\"))) (\"contracts/NFT.py\" 189))) ((\"contracts/NFT.py\" 192) verify ((\"contracts/NFT.py\" 192) lt ((\"contracts/NFT.py\" 192) attr ((\"contracts/NFT.py\" 183) params) \"token_id\") ((\"contracts/NFT.py\" 192) attr ((\"\" -1) data) \"next_token_id\")) ((\"contracts/NFT.py\" 192) literal (string \"FA2_TOKEN_UNDEFINED\"))) ((\"contracts/NFT.py\" 193) result ((\"contracts/NFT.py\" 193) eif ((\"contracts/NFT.py\" 193) eq ((\"contracts/NFT.py\" 193) get_item ((\"contracts/NFT.py\" 193) attr ((\"\" -1) data) \"ledger\") ((\"contracts/NFT.py\" 192) attr ((\"contracts/NFT.py\" 183) params) \"token_id\")) ((\"contracts/NFT.py\" 193) attr ((\"contracts/NFT.py\" 183) params) \"owner\")) ((\"contracts/NFT.py\" 193) literal (intOrNat 1)) ((\"contracts/NFT.py\" 193) literal (intOrNat 0)))))) (offchain is_operator True (\"contracts/NFT.py\" 202) True \"Return whether `operator` is allowed to transfer `token_id` tokens\\n        owned by `owner`.\" (((\"contracts/NFT.py\" 206) result ((\"contracts/NFT.py\" 206) contains ((\"contracts/NFT.py\" 206) attr ((\"\" -1) data) \"operators\") ((\"contracts/NFT.py\" 202) params))))) (onchain is_paused False (\"contracts/NFT.py\" 295) True \"Checks if the contracts is paused.\\n        \" (((\"contracts/NFT.py\" 300) result ((\"contracts/NFT.py\" 300) attr ((\"\" -1) data) \"paused\")))) (offchain total_supply True (\"contracts/NFT.py\" 195) True \"Return the total number of tokens for the given `token_id` if known\\n        or fail if not.\" (((\"contracts/NFT.py\" 199) verify ((\"contracts/NFT.py\" 199) lt ((\"contracts/NFT.py\" 199) attr ((\"contracts/NFT.py\" 195) params) \"token_id\") ((\"contracts/NFT.py\" 199) attr ((\"\" -1) data) \"next_token_id\")) ((\"contracts/NFT.py\" 199) literal (string \"FA2_TOKEN_UNDEFINED\"))) ((\"contracts/NFT.py\" 200) result ((\"contracts/NFT.py\" 200) literal (intOrNat 1))))))\nentry_points_layout ()\ninitial_metadata ((metadata_base (meta_map (\"contracts/NFT.py\" 54) (elem ((\"contracts/NFT.py\" 54) literal (string \"name\")) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"FatCow IO\")))) (elem ((\"contracts/NFT.py\" 54) literal (string \"version\")) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"0.1.0\")))) (elem ((\"contracts/NFT.py\" 54) literal (string \"description\")) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"This is the FatCow NFT base template for implementing tickets, implemented using the FA2 (TZIP-012) base.\")))) (elem ((\"contracts/NFT.py\" 54) literal (string \"interfaces\")) (meta_list (\"contracts/NFT.py\" 54) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"TZIP-012\"))) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"TZIP-016\"))))) (elem ((\"contracts/NFT.py\" 54) literal (string \"authors\")) (meta_list (\"contracts/NFT.py\" 54) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"SmartPy <https://fatcow.io/#contact>\"))))) (elem ((\"contracts/NFT.py\" 54) literal (string \"homepage\")) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"https://fatcow.io\")))) (elem ((\"contracts/NFT.py\" 54) literal (string \"source\")) (meta_map (\"contracts/NFT.py\" 54) (elem ((\"contracts/NFT.py\" 54) literal (string \"tools\")) (meta_list (\"contracts/NFT.py\" 54) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"SmartPy\"))))) (elem ((\"contracts/NFT.py\" 54) literal (string \"location\")) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"https://gitlab.com/SmartPy/smartpy/-/raw/master/python/templates/fa2_nft_minimal.py\")))))) (elem ((\"contracts/NFT.py\" 54) literal (string \"permissions\")) (meta_map (\"contracts/NFT.py\" 54) (elem ((\"contracts/NFT.py\" 54) literal (string \"operator\")) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"owner-or-operator-transfer\")))) (elem ((\"contracts/NFT.py\" 54) literal (string \"receiver\")) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"owner-no-hook\")))) (elem ((\"contracts/NFT.py\" 54) literal (string \"sender\")) (meta_expr ((\"contracts/NFT.py\" 54) literal (string \"owner-no-hook\")))))) (elem ((\"contracts/NFT.py\" 54) literal (string \"views\")) (meta_list (\"contracts/NFT.py\" 54) (meta_view \"all_tokens\" (\"contracts/NFT.py\" 178)) (meta_view \"get_balance\" (\"contracts/NFT.py\" 183)) (meta_view \"is_operator\" (\"contracts/NFT.py\" 202)) (meta_view \"total_supply\" (\"contracts/NFT.py\" 195)))))))\nbalance ())",
    "id": "((\"\" -1) static_id 0)",
    "line_no": "(\"\" -1)",
    "show": true
   }
  ],
  "kind": "compilation"
 }
]